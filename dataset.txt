$an = "azaceproddatalake01"
$dt = Get-Date -format "yyyyMMdd"
$exp = [System.DateTime]::Now.AddDays(30)
$sourcepath = "/D2C/Raw" 
$destinationpath = "/D2C/Archive"
$rgn = "AZ-ACE-Prod-MiddleTier"
$df = "AZ-ACE-Prod-DataFactory-01"
$pln = "D2C-ETLProcess-SqlServerToADLS-Daily"
$dsn = "DS-AzureDataLakeStore-Azure-dbo-vKPICustomerDatabase"


$Conn = Get-AutomationConnection -Name AzureRunAsConnection
Add-AzureRMAccount -ServicePrincipal -Tenant $Conn.TenantID -ApplicationId $Conn.ApplicationID -CertificateThumbprint $Conn.CertificateThumbprint

$sdt = [System.DateTime]::Today.AddDays(-1).AddSeconds(-3)
$edt = [System.DateTime]::Today.AddDays(-1)


$apr=Set-AzureRmDataFactoryPipelineActivePeriod -DataFactoryName $df -PipelineName $pln -StartDateTime $sdt -EndDateTime $edt -ResourceGroupName $rgn
If($apr) {
        Write-Output "Pipeline $pln of data factory $dfn updated with StartDateTime $sdt and EndDateTime $edt."
}

$rpr = Resume-AzureRmDataFactoryPipeline -DataFactoryName $df -Name $pln -ResourceGroupName $rgn
If($rpr){
        Write-Output "Pipeline $pln resumed."
}
# Create arrays that hold all possible data factory slice states
$failedStates = "Failed Validation", "Timed Out", "Skip", "Failed"
$pendingStates = "Retry Validation", "PendingValidation", "Retry", "InProgress", "PendingExecution", "Waiting"
$finishedStates = "Ready"

Write-Output $state
# Wait while data factory slice is in pending state
While ( Get-AzureRmDataFactorySlice -DataFactoryName $df -DatasetName $dsn -StartDateTime $sdt -EndDateTime $edt -ResourceGroupName $rgn | Where -Property State -in $pendingStates) {
        Write-Output "Slice status is:" 
        Get-AzureRmDataFactorySlice -DataFactoryName $df -DatasetName $dsn -StartDateTime $sdt -EndDateTime $edt -ResourceGroupName $rgn | Select -Property State
        Write-Output "Wait 15 seconds"
        Start-Sleep 15
    }
 
 # Since data factory slice is not pending (anymore), it is either failed or finished
If(Get-AzureRmDataFactorySlice -DataFactoryName $df -DatasetName $dsn -StartDateTime $sdt -EndDateTime $edt -ResourceGroupName $rgn | Where -Property State -in $failedStates){
    Write-Output "Slice failed."
    Get-AzureRmDataFactorySlice -DataFactoryName $df -DatasetName $dsn -StartDateTime $sdt -EndDateTime $edt -ResourceGroupName $rgn | Select -Property State
    } ElseIf (Get-AzureRmDataFactorySlice -DataFactoryName $df -DatasetName $dsn -StartDateTime $sdt -EndDateTime $edt -ResourceGroupName $rgn | Where -Property State -in $finishedStates) {
           Write-Output "Slice finished."
          } Else {
           Write-Output "No State found?"
           Get-AzureRmDataFactorySlice -DataFactoryName $df -DatasetName $dsn -StartDateTime $sdt -EndDateTime $edt -ResourceGroupName $rgn | Select -Property State
        }
        
        
===================================================================================================================================


$RG = "df"
$DFname = "adf0320"


Get-AzureRmDataFactory -ResourceGroupName $RG

Get-AzureRmDataFactory -ResourceGroupName $RG -Name $DFname

# Find the Data Factory
$df= Get-AzureRmDataFactory -ResourceGroupName $RG -Name $DFname
if ($df -eq $null) { Write-Host "Data Factory " $DFname " cannot be found. Check spelling and resource group name. Error: " $_ -BackgroundColor:Red }



# List all DataSets in the data factory - Add the LIKE filter by name instead of * if needed such as *output*
$DataSets = Get-AzureRmDataFactoryDataset -DataFactory $df | Where {$_.DatasetName -like "*"} | Sort-Object DatasetName

# Loop over matching named DataSets
$i = 1
ForEach($DS in $DataSets)
{
Write-Host $DS.DataFactoryName "--> " $DS.DatasetName -ForegroundColor:Yellow 

# List slices
$Slices = Get-AzureRmDataFactorySlice -DataFactory $df -DatasetName $DS.DatasetName -StartDateTime 2019-03-20T10:00:00.0000000 -EndDateTime 2019-03-20T11:00:00.0000000

# Reset all slices to status Waiting for the given dataset, in case there are multiple
ForEach($S in $Slices) 
{
$outcome=$false
#Write-Host $i ":" $DS.DataFactoryName "--> " $DS.DatasetName "--> Slice Start:["$S.Start"] End:["$S.End"] State:"$S.State $S.SubState -ForegroundColor:Cyan


#Get-AzureRmDataFactoryActivityWindow  -DataFactoryName $dataFactoryName -ResourceGroupName $resourceGroupName -RunStart $runStartDateTimeUTC | ? {$PSItem.WindowState -eq 'Failed'

Try {
$outcome=Set-AzureRmDataFactorySliceStatus -DataFactory $df -DatasetName $DS.DatasetName -Status Waiting -StartDateTime 2019-03-19T12:00:00.0000000 -EndDateTime 2019-03-20T12:00:00.0000000

Write-Host $i ":" $DS.DataFactoryName "--> " $DS.DatasetName "--> Slice Start:["$S.Start"] End:["$S.End"] State:"$S.State $S.SubState -ForegroundColor:Cyan

Write-Host " Slice status reset to Waiting so it will run again:" $outcome -ForegroundColor:Green

}
Catch
{
Write-Host " Slice status reset has failed. Error: " $_ -ForegroundColor:Red
}
$i++
}
}

========================================================================================================================================

$RG = "df"
$DFname = "adf0321"

$runStartDateTimeUTC = '2019-03-20T12:00:00Z'



Get-AzureRmDataFactoryActivityWindow -DataFactoryName $DFname -ResourceGroupName $RG -RunStart $runStartDateTimeUTC | SELECT PipelineName, ActivityName, ActivityType,WindowState, PercentComplete `
| ? {$PSItem.WindowState -eq 'Failed'} 





#Get-AzureRmDataFactory -ResourceGroupName $RG

#Get-AzureRmDataFactory -ResourceGroupName $RG -Name $DFname

# Find the Data Factory
$df= Get-AzureRmDataFactory -ResourceGroupName $RG -Name $DFname
if ($df -eq $null) { Write-Host "Data Factory " $DFname " cannot be found. Check spelling and resource group name. Error: " $_ -BackgroundColor:Red }



# List all DataSets in the data factory - Add the LIKE filter by name instead of * if needed such as *output*
$DataSets = Get-AzureRmDataFactoryDataset -DataFactory $df | Where {$_.DatasetName -like "*"} | Sort-Object DatasetName

# Loop over matching named DataSets
$i = 1
ForEach($DS in $DataSets)
{
Write-Host $DS.DataFactoryName "--> " $DS.DatasetName -ForegroundColor:Yellow 

# List slices
$Slices = Get-AzureRmDataFactorySlice -DataFactory $df -DatasetName $DS.DatasetName -StartDateTime 2019-03-20T10:00:00.0000000 -EndDateTime 2019-03-21T11:00:00.0000000
#write-host($Slices)

# Reset all slices to status Waiting for the given dataset, in case there are multiple
ForEach($S in $Slices) 
{
write-host "my output" $S
$outcome=$false
#Write-Host $i ":" $DS.DataFactoryName "--> " $DS.DatasetName "--> Slice Start:["$S.Start"] End:["$S.End"] State:"$S.State $S.SubState -ForegroundColor:Cyan


#Get-AzureRmDataFactoryActivityWindow  -DataFactoryName $dataFactoryName -ResourceGroupName $resourceGroupName -RunStart $runStartDateTimeUTC | ? {$PSItem.WindowState -eq 'Failed'

Try {
$outcome=Set-AzureRmDataFactorySliceStatus -DataFactory $df -DatasetName $DS.DatasetName -Status Waiting -StartDateTime 2019-03-20T12:30:00.0000000 -EndDateTime 2019-03-21T12:30:00.0000000

Write-Host $i ":" $DS.DataFactoryName "--> " $DS.DatasetName "--> Slice Start:["$S.Start"] End:["$S.End"] State:"$S.State $S.SubState -ForegroundColor:Cyan

Write-Host " Slice status reset to Waiting so it will run again:" $outcome -ForegroundColor:Green

}
Catch
{
Write-Host " Slice status reset has failed. Error: " $_ -ForegroundColor:Red
}
$i++
}
}















